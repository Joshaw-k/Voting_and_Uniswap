/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidateAddress"
      | "candidateId"
      | "candidates"
      | "getCandidateData"
      | "getCandidateLength"
      | "getCandidates"
      | "getVoteList"
      | "getVotedList"
      | "getVoterData"
      | "getVoterLength"
      | "setCandidate"
      | "vote"
      | "votedVoters"
      | "voterId"
      | "voterRight"
      | "voters"
      | "votersAddress"
      | "votingOrganiser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CandidateCreate" | "VoterCreate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "candidateAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotedList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votedVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voterId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voterRight",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votersAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingOrganiser",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "candidateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votedVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voterRight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingOrganiser",
    data: BytesLike
  ): Result;
}

export namespace CandidateCreateEvent {
  export type InputTuple = [
    candidateId: BigNumberish,
    age: BigNumberish,
    name: string,
    voteCount: BigNumberish,
    candidateAddress: AddressLike
  ];
  export type OutputTuple = [
    candidateId: bigint,
    age: bigint,
    name: string,
    voteCount: bigint,
    candidateAddress: string
  ];
  export interface OutputObject {
    candidateId: bigint;
    age: bigint;
    name: string;
    voteCount: bigint;
    candidateAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterCreateEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    voterAddress: AddressLike,
    voterAllowed: BigNumberish,
    voterVoted: boolean,
    votes: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    voterAddress: string,
    voterAllowed: bigint,
    voterVoted: boolean,
    votes: bigint
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    voterAddress: string;
    voterAllowed: bigint;
    voterVoted: boolean;
    votes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidateAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  candidateId: TypedContractMethod<[], [bigint], "view">;

  candidates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, bigint, string] & {
        candidateId: bigint;
        age: bigint;
        name: string;
        voteCount: bigint;
        _candidateAddress: string;
      }
    ],
    "view"
  >;

  getCandidateData: TypedContractMethod<
    [_candidateAddress: AddressLike],
    [[bigint, string, bigint, bigint, string]],
    "view"
  >;

  getCandidateLength: TypedContractMethod<[], [bigint], "view">;

  getCandidates: TypedContractMethod<[], [string[]], "view">;

  getVoteList: TypedContractMethod<[], [string[]], "view">;

  getVotedList: TypedContractMethod<[], [string[]], "view">;

  getVoterData: TypedContractMethod<
    [_candidateAddress: AddressLike],
    [[bigint, string, string, bigint, bigint, boolean]],
    "view"
  >;

  getVoterLength: TypedContractMethod<[], [bigint], "view">;

  setCandidate: TypedContractMethod<
    [_age: BigNumberish, _name: string, _candidateAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_candidateAddress: AddressLike, _candidateVoteId: BigNumberish],
    [void],
    "nonpayable"
  >;

  votedVoters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  voterId: TypedContractMethod<[], [bigint], "view">;

  voterRight: TypedContractMethod<
    [name: string, voterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        voterAddress: string;
        voterAllowed: bigint;
        votes: bigint;
        voterVoted: boolean;
      }
    ],
    "view"
  >;

  votersAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  votingOrganiser: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidateAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "candidateId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, bigint, string] & {
        candidateId: bigint;
        age: bigint;
        name: string;
        voteCount: bigint;
        _candidateAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidateData"
  ): TypedContractMethod<
    [_candidateAddress: AddressLike],
    [[bigint, string, bigint, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidateLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoteList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotedList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoterData"
  ): TypedContractMethod<
    [_candidateAddress: AddressLike],
    [[bigint, string, string, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCandidate"
  ): TypedContractMethod<
    [_age: BigNumberish, _name: string, _candidateAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_candidateAddress: AddressLike, _candidateVoteId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votedVoters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "voterId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voterRight"
  ): TypedContractMethod<
    [name: string, voterAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        voterAddress: string;
        voterAllowed: bigint;
        votes: bigint;
        voterVoted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votersAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "votingOrganiser"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CandidateCreate"
  ): TypedContractEvent<
    CandidateCreateEvent.InputTuple,
    CandidateCreateEvent.OutputTuple,
    CandidateCreateEvent.OutputObject
  >;
  getEvent(
    key: "VoterCreate"
  ): TypedContractEvent<
    VoterCreateEvent.InputTuple,
    VoterCreateEvent.OutputTuple,
    VoterCreateEvent.OutputObject
  >;

  filters: {
    "CandidateCreate(uint256,uint256,string,uint256,address)": TypedContractEvent<
      CandidateCreateEvent.InputTuple,
      CandidateCreateEvent.OutputTuple,
      CandidateCreateEvent.OutputObject
    >;
    CandidateCreate: TypedContractEvent<
      CandidateCreateEvent.InputTuple,
      CandidateCreateEvent.OutputTuple,
      CandidateCreateEvent.OutputObject
    >;

    "VoterCreate(uint256,string,address,uint256,bool,uint256)": TypedContractEvent<
      VoterCreateEvent.InputTuple,
      VoterCreateEvent.OutputTuple,
      VoterCreateEvent.OutputObject
    >;
    VoterCreate: TypedContractEvent<
      VoterCreateEvent.InputTuple,
      VoterCreateEvent.OutputTuple,
      VoterCreateEvent.OutputObject
    >;
  };
}
